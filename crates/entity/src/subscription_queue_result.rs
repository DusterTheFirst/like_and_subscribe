//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "subscription_queue_result")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub queue_id: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub error: Option<String>,
    pub timestamp: entity_types::jiff_compat::JiffTimestampMilliseconds,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::subscription_queue::Entity",
        from = "Column::QueueId",
        to = "super::subscription_queue::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SubscriptionQueue,
}

impl Related<super::subscription_queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubscriptionQueue.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
