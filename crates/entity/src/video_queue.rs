//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "video_queue")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub channel_id: String,
    #[sea_orm(column_type = "Text")]
    pub video_id: String,
    pub published_at: i32,
    pub updated_at: i32,
    pub timestamp: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::known_channels::Entity",
        from = "Column::ChannelId",
        to = "super::known_channels::Column::ChannelId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    KnownChannels,
    #[sea_orm(
        belongs_to = "super::known_videos::Entity",
        from = "Column::VideoId",
        to = "super::known_videos::Column::VideoId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    KnownVideos,
    #[sea_orm(has_one = "super::video_queue_result::Entity")]
    VideoQueueResult,
}

impl Related<super::known_channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KnownChannels.def()
    }
}

impl Related<super::known_videos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KnownVideos.def()
    }
}

impl Related<super::video_queue_result::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VideoQueueResult.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
